// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AdminRole {
  SUPERADMIN
  ADMIN
}

// model Admin {
//   id        Int       @id @unique @default(autoincrement())
//   name      String    @unique
//   password  String
//   // Add other admin-specific fields here
//   subjects  Subject[] // Admin can create multiple subjects
//   Class     Class[]
//   role      AdminRole @default(ADMIN)
//   disabled  Boolean   @default(true)
//   Teacher   Teacher[]
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
// }

// model Student {
//   id               Int                @id @unique @default(autoincrement())
//   firstName        String
//   lastName         String
//   middleName       String?
//   phonenumber      String             @unique
//   password         String
//   courses_enrolled CourseEnrollment[] // A student can register for multiple subjects
//   grades           Grade[]
//   Class            Class              @relation(fields: [classId], references: [id])
//   classId          Int
//   createdAt        DateTime           @default(now())
//   updatedAt        DateTime           @updatedAt
//   active           Boolean
//   Session          Session[]
//   subjects         Subject[]
// }

// model Subject {
//   id                String             @id @default(uuid())
//   subjectName       String
//   studentId         Int?
//   Admin             Admin              @relation(fields: [adminId], references: [id]) // A subject can be created by one admin
//   students          Student[] // Many students can register for a subject
//   class             Class              @relation(fields: [classId], references: [id])
//   grades            Grade[] // A subject can have multiple grades
//   Teacher           Teacher?           @relation(fields: [teacherId], references: [id])
//   teacherId         Int?
//   adminId           Int
//   classId           Int
//   course_enrollment CourseEnrollment[]
//   Session           Session?           @relation(fields: [sessionId], references: [id])
//   sessionId         Int?

//   isElective Boolean @default(false)
// }

// model Teacher {
//   id                 Int       @id @unique @default(autoincrement())
//   firstName          String
//   lastName           String
//   middleName         String?
//   createdBy          Admin     @relation(fields: [adminId], references: [id])
//   // Add other teacher-specific fields here
//   subjects           Subject[] // A teacher can be assigned to multiple subjects
//   grades             Grade[] // A teacher can supply multiple grades
//   classAsHeadTeacher Class? // A teacher can be the head teacher of one class (optional)
//   adminId            Int
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @updatedAt
//   active             Boolean
//   phonenumber        String    @unique
//   password           String
// }

// model Class {
//   id         Int       @id @default(autoincrement())
//   name       String
//   // Add other class-specific fields here
//   adminId    Int
//   admin      Admin     @relation(fields: [adminId], references: [id])
//   students   Student[] // A class can have multiple students
//   teacherId  Int       @unique
//   teacher    Teacher   @relation(fields: [teacherId], references: [id])
//   subject    Subject[]
//   active     Boolean
//   classLevel String
// }

// model Session {
//   id                  Int       @id @default(autoincrement())
//   year                Int
//   subject             Subject[]
//   registered_students Student[]
//   term                Term[]
// }

// model Term {
//   id        Int     @id @default(autoincrement())
//   session   Session @relation(fields: [sessionId], references: [id])
//   sessionId Int
//   result    Grade[]
// }

// model CourseEnrollment {
//   id        String  @id @default(uuid())
//   subject   Subject @relation(fields: [subjectId], references: [id])
//   sessionId Int
//   Student   Student @relation(fields: [studentId], references: [id])
//   studentId Int
//   subjectId String

//   grade Grade?
// }

// model Grade {
//   id                 String           @id @default(uuid())
//   value              Float // You can adjust the data type as needed (e.g., Int for integer grades)
//   tutorNote          String?
//   Subject            Subject          @relation(fields: [subjectId], references: [id])
//   subjectId          String
//   Teacher            Teacher          @relation(fields: [teacherId], references: [id])
//   teacherId          Int
//   createdAt          DateTime         @default(now())
//   updatedAt          DateTime         @updatedAt
//   course_enrollment  CourseEnrollment @relation(fields: [courseEnrollmentId], references: [id])
//   courseEnrollmentId String           @unique
//   Student            Student?         @relation(fields: [studentId], references: [id])
//   studentId          Int?

//   Term   Term? @relation(fields: [termId], references: [id])
//   termId Int?
// }

///////////
////////// PREVENT INSERT TO ANY GRADE AFTER A SESSION ELASPES OR AFTER A TERM ELASPES
/////////
model Admin {
  id               Int                @id @unique @default(autoincrement())
  name             String             @unique
  password         String
  subjects         SubjectAssigned[] // Admin can create multiple subjects
  classes          Class[]
  role             AdminRole          @default(ADMIN)
  disabled         Boolean            @default(true)
  teachers         Teacher[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Subject          Subject[]
  Session          Session[]
  CourseEnrollment CourseEnrollment[]
  ClassAssignment  ClassAssignment[]
  Constant         Constant[]
}

model Session {
  id                 Int                @id @default(autoincrement())
  academicYear       String // E.g., "2018/2019", "2020/2021"
  registeredStudents Student[]
  terms              Term[]
  CourseEnrollment   CourseEnrollment[]
  Admin              Admin              @relation(fields: [adminId], references: [id])
  adminId            Int
  ClassAssignment    ClassAssignment[]
}

model Term {
  id          Int                @id @default(autoincrement())
  termName    String // E.g., "Term 1", "Term 2", "Term 3"
  session     Session            @relation(fields: [sessionId], references: [id])
  sessionId   Int
  results     Grade[]
  enrollments CourseEnrollment[]
  openDate    DateTime
  closedDate  DateTime
  inTerm      Boolean            @default(false)
}

model Student {
  id                  Int                @id @unique @default(autoincrement())
  firstName           String
  lastName            String
  middleName          String?
  motherMaidenName    String
  classToBeAdmittedTo ClassLevel
  phonenumber         String             @unique
  password            String
  courseEnrollments   CourseEnrollment[] // A student can register for multiple subjects
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  active              Boolean
  CurrentClass        Class?             @relation(fields: [classId], references: [id])
  classId             Int?

  sessions        Session[]
  ClassAssignment ClassAssignment[]

  @@unique([firstName, lastName, motherMaidenName, phonenumber], name: "fullName")
}

//add subject option inlude subject name and subject/class level

model Subject {
  id                 Int               @id @default(autoincrement())
  name               String            @unique
  allowedClassLevels ClassLevel[]
  SubjectAssigned    SubjectAssigned[]
  admin              Admin             @relation(fields: [adminId], references: [id])
  adminId            Int
}

enum ClassLevel {
  JSS1
  JSS2
  JSS3
  SS1
  SS2
  SS3
  GRADE7
  GRADE8
  GRADE9
  GRADE10
  GRADE11
  GRADE12
}

model SubjectAssigned {
  id                String             @id @default(uuid())
  Subject           Subject            @relation(fields: [subjectId], references: [id])
  admin             Admin              @relation(fields: [adminId], references: [id]) // A subject can be created by one admin
  adminId           Int
  class             Class              @relation(fields: [classId], references: [id])
  classId           Int
  teacher           Teacher?           @relation(fields: [teacherId], references: [id])
  teacherId         Int?
  courseEnrollments CourseEnrollment[]
  isElective        Boolean            @default(false)
  subjectId         Int
}

model Class {
  id              Int               @id @default(autoincrement())
  name            String
  admin           Admin             @relation(fields: [adminId], references: [id])
  adminId         Int
  classTeacher    Teacher?          @relation(fields: [teacherId], references: [id])
  teacherId       Int?              @unique
  subjects        SubjectAssigned[]
  active          Boolean
  classLevel      ClassLevel
  // CourseEnrollment CourseEnrollment[]
  ClassAssignment ClassAssignment[]
  Student         Student[]
}

model CourseEnrollment {
  id                String          @id @unique @default(uuid())
  student           Student         @relation(fields: [studentId], references: [id])
  studentId         Int
  subject           SubjectAssigned @relation(fields: [subjectId], references: [id])
  subjectId         String
  session           Session         @relation(fields: [sessionId], references: [id])
  sessionId         Int
  term              Term            @relation(fields: [termId], references: [id])
  termId            Int
  grades            Grade[]
  admin             Admin           @relation(fields: [adminId], references: [id]) // A subject can be created by one admin
  adminId           Int
  // class     Class           @relation(fields: [classId], references: [id])
  // classId   Int
  ClassAssignment   ClassAssignment @relation(fields: [classAssignmentId], references: [id])
  classAssignmentId Int
}

model ClassAssignment {
  id               Int                @id @unique @default(autoincrement())
  student          Student            @relation(fields: [studentId], references: [id])
  studentId        Int
  class            Class              @relation(fields: [classId], references: [id])
  classId          Int
  session          Session            @relation(fields: [sessionId], references: [id])
  sessionId        Int
  assignedAt       DateTime           @default(now())
  admin            Admin              @relation(fields: [adminId], references: [id]) // A subject can be created by one admin
  adminId          Int
  CourseEnrollment CourseEnrollment[]
}

model Grade {
  id                 String           @id @default(uuid())
  value              Float // You can adjust the data type as needed (e.g., Int for integer grades)
  tutorNote          String?
  courseEnrollment   CourseEnrollment @relation(fields: [courseEnrollmentId], references: [id])
  courseEnrollmentId String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  Term               Term?            @relation(fields: [termId], references: [id])
  termId             Int?
}

model Teacher {
  id                 Int               @id @unique @default(autoincrement())
  firstName          String
  lastName           String
  middleName         String?
  createdBy          Admin             @relation(fields: [adminId], references: [id])
  adminId            Int
  subjects           SubjectAssigned[] // A teacher can be assigned to multiple subjects
  classAsHeadTeacher Class? // A teacher can be the head teacher of one class (optional)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  active             Boolean
  phonenumber        String            @unique
  password           String
}

//registerable subjects

//when you create a student, he is automatically registered for compulsory courses/subjects and can pick elective later if any
// model CompulsorySubject {
//   id       String    @id @default(uuid())
//   subjects Subject[]
//   class    Class     @relation(fields: [classId], references: [id])
//   classId  Int
// }

// model ElectiveSubject {
//   id       String    @id @default(uuid())
//   subjects Subject[]
//   class    Class     @relation(fields: [classId], references: [id])
//   classId  Int
// }

//storage of constants
//store keys in dotenv file
model Constant {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin    @relation(fields: [adminId], references: [id])
  adminId   Int
}
